///
/// FlexDirection.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::RNSkiaYoga {

  /**
   * An enum which can be represented as a JavaScript union (FlexDirection).
   */
  enum class FlexDirection {
    COLUMN      SWIFT_NAME(column) = 0,
    COLUMN_REVERSE      SWIFT_NAME(columnReverse) = 1,
    ROW      SWIFT_NAME(row) = 2,
    ROW_REVERSE      SWIFT_NAME(rowReverse) = 3,
  } CLOSED_ENUM;

} // namespace margelo::nitro::RNSkiaYoga

namespace margelo::nitro {

  // C++ FlexDirection <> JS FlexDirection (union)
  template <>
  struct JSIConverter<margelo::nitro::RNSkiaYoga::FlexDirection> final {
    static inline margelo::nitro::RNSkiaYoga::FlexDirection fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("column"): return margelo::nitro::RNSkiaYoga::FlexDirection::COLUMN;
        case hashString("column-reverse"): return margelo::nitro::RNSkiaYoga::FlexDirection::COLUMN_REVERSE;
        case hashString("row"): return margelo::nitro::RNSkiaYoga::FlexDirection::ROW;
        case hashString("row-reverse"): return margelo::nitro::RNSkiaYoga::FlexDirection::ROW_REVERSE;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum FlexDirection - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::RNSkiaYoga::FlexDirection arg) {
      switch (arg) {
        case margelo::nitro::RNSkiaYoga::FlexDirection::COLUMN: return JSIConverter<std::string>::toJSI(runtime, "column");
        case margelo::nitro::RNSkiaYoga::FlexDirection::COLUMN_REVERSE: return JSIConverter<std::string>::toJSI(runtime, "column-reverse");
        case margelo::nitro::RNSkiaYoga::FlexDirection::ROW: return JSIConverter<std::string>::toJSI(runtime, "row");
        case margelo::nitro::RNSkiaYoga::FlexDirection::ROW_REVERSE: return JSIConverter<std::string>::toJSI(runtime, "row-reverse");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert FlexDirection to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("column"):
        case hashString("column-reverse"):
        case hashString("row"):
        case hashString("row-reverse"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
