///
/// Direction.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::RNSkiaYoga {

  /**
   * An enum which can be represented as a JavaScript union (Direction).
   */
  enum class Direction {
    INHERIT      SWIFT_NAME(inherit) = 0,
    LTR      SWIFT_NAME(ltr) = 1,
    RTL      SWIFT_NAME(rtl) = 2,
  } CLOSED_ENUM;

} // namespace margelo::nitro::RNSkiaYoga

namespace margelo::nitro {

  using namespace margelo::nitro::RNSkiaYoga;

  // C++ Direction <> JS Direction (union)
  template <>
  struct JSIConverter<Direction> final {
    static inline Direction fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("inherit"): return Direction::INHERIT;
        case hashString("ltr"): return Direction::LTR;
        case hashString("rtl"): return Direction::RTL;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum Direction - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, Direction arg) {
      switch (arg) {
        case Direction::INHERIT: return JSIConverter<std::string>::toJSI(runtime, "inherit");
        case Direction::LTR: return JSIConverter<std::string>::toJSI(runtime, "ltr");
        case Direction::RTL: return JSIConverter<std::string>::toJSI(runtime, "rtl");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert Direction to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("inherit"):
        case hashString("ltr"):
        case hashString("rtl"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
