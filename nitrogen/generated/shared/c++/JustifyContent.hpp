///
/// JustifyContent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::RNSkiaYoga {

  /**
   * An enum which can be represented as a JavaScript union (JustifyContent).
   */
  enum class JustifyContent {
    FLEX_START      SWIFT_NAME(flexStart) = 0,
    CENTER      SWIFT_NAME(center) = 1,
    FLEX_END      SWIFT_NAME(flexEnd) = 2,
    SPACE_BETWEEN      SWIFT_NAME(spaceBetween) = 3,
    SPACE_AROUND      SWIFT_NAME(spaceAround) = 4,
    SPACE_EVENLY      SWIFT_NAME(spaceEvenly) = 5,
  } CLOSED_ENUM;

} // namespace margelo::nitro::RNSkiaYoga

namespace margelo::nitro {

  // C++ JustifyContent <> JS JustifyContent (union)
  template <>
  struct JSIConverter<margelo::nitro::RNSkiaYoga::JustifyContent> final {
    static inline margelo::nitro::RNSkiaYoga::JustifyContent fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("flex-start"): return margelo::nitro::RNSkiaYoga::JustifyContent::FLEX_START;
        case hashString("center"): return margelo::nitro::RNSkiaYoga::JustifyContent::CENTER;
        case hashString("flex-end"): return margelo::nitro::RNSkiaYoga::JustifyContent::FLEX_END;
        case hashString("space-between"): return margelo::nitro::RNSkiaYoga::JustifyContent::SPACE_BETWEEN;
        case hashString("space-around"): return margelo::nitro::RNSkiaYoga::JustifyContent::SPACE_AROUND;
        case hashString("space-evenly"): return margelo::nitro::RNSkiaYoga::JustifyContent::SPACE_EVENLY;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum JustifyContent - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::RNSkiaYoga::JustifyContent arg) {
      switch (arg) {
        case margelo::nitro::RNSkiaYoga::JustifyContent::FLEX_START: return JSIConverter<std::string>::toJSI(runtime, "flex-start");
        case margelo::nitro::RNSkiaYoga::JustifyContent::CENTER: return JSIConverter<std::string>::toJSI(runtime, "center");
        case margelo::nitro::RNSkiaYoga::JustifyContent::FLEX_END: return JSIConverter<std::string>::toJSI(runtime, "flex-end");
        case margelo::nitro::RNSkiaYoga::JustifyContent::SPACE_BETWEEN: return JSIConverter<std::string>::toJSI(runtime, "space-between");
        case margelo::nitro::RNSkiaYoga::JustifyContent::SPACE_AROUND: return JSIConverter<std::string>::toJSI(runtime, "space-around");
        case margelo::nitro::RNSkiaYoga::JustifyContent::SPACE_EVENLY: return JSIConverter<std::string>::toJSI(runtime, "space-evenly");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert JustifyContent to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("flex-start"):
        case hashString("center"):
        case hashString("flex-end"):
        case hashString("space-between"):
        case hashString("space-around"):
        case hashString("space-evenly"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
